@page "/invoices/{Id:guid}"
@using LIT.Smabu.Domain.Shared.Common;
@using LIT.Smabu.Shared.Customers;
@using LIT.Smabu.Shared.Invoices;
@using Microsoft.AspNetCore.Authorization;
@inject HttpClient Http
@inject PageInfoService pageInfoService;
@attribute [Authorize]

<MudContainer>
    @if (model != null)
    {
        <MudStack Row Justify="Justify.SpaceBetween">
            <MudText Typo="Typo.h4">@("Rechnung " + @model.Number.ToShortString())</MudText>
            <MudButtonGroup>

            </MudButtonGroup>
        </MudStack>

        <MudForm Model="model" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="#"
                                    ReadOnly
                                   Value="@model.Number.ToShortString()" />
                 </MudItem>
                 <MudItem xs="12" sm="6">
                     <MudTextField Label="Kunde"
                                    ReadOnly
                                   Value="@(model.Customer.Number.ToShortString() + " / " + @model.Customer.Name)" />
                 </MudItem>
                 <MudItem xs="12" sm="4">
                     <MudTextField Label="Geschäftsjahr"
                                    ReadOnly
                                   Value="@model.FiscalYear" />
                 </MudItem>
                 <MudItem xs="12" sm="4">
                     <MudDatePicker Label="Leistungsstart" MaxDate="@performancePeriodTo" @bind-Date="@performancePeriodFrom" />
                 </MudItem>
                 <MudItem xs="12" sm="4">
                     <MudDatePicker Label="Leistungsende" MinDate="@performancePeriodTo" @bind-Date="@performancePeriodTo" />
                 </MudItem>

                 <MudItem xs="12">
                     <MudSimpleTable>
                         <thead>
                             <tr>
                                 <th>Pos.</th>
                                 <th>Beschreibung</th>
                                 <th>Menge</th>
                                 <th>Einheit</th>
                                 <th>Einzelpreis</th>
                                 <th>Summe</th>
                                 <th></th>
                             </tr>
                         </thead>
                         <tbody>
                             @foreach (var line in model.InvoiceLines)
                            {
                                <tr>
                                    <td>@line.Position</td>
                                    <td>@line.Details</td>
                                    <td>@line.Quantity.Value</td>
                                    <td>@line.Quantity.Unit</td>
                                    <td style="white-space:nowrap;">@model.Currency.Format(@line.UnitPrice)</td>
                                    <td style="white-space:nowrap;">@model.Currency.Format(@line.TotalPrice)</td>
                                    <td>
                                        <MudStack Row>
                                         <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="@Color.Default" Size="Size.Small" Href="@($"Invoices/{Id}/lines/{line.Id}")" title="Öffnen"></MudIconButton>
                                         <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="@Color.Error" Size="Size.Small" title="Löschen"></MudIconButton>
                                     </MudStack>
                                 </td>
                             </tr>
                            }
                            <tr>
                                <td></td>
                                <td style="font-weight: bold;">Total</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td style="white-space:nowrap; font-weight: bold;">@model.Currency.Format(@model.Amount)</td>
                                <td></td>
                            </tr>
                        </tbody>
                    </MudSimpleTable>
                </MudItem>

                <MudItem xs="12">
                    <MudButtonGroup>
                        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Default" Href="/invoices" />
                        <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Success" Disabled="@(!success)" OnClick="@SubmitAsync" />
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </MudForm>
    }
</MudContainer>




 @code {
    @inject NavigationManager NavigationManager;
    [Parameter] public Guid Id { get; set; }

    bool success;
    string[] errors = { };
    InvoiceDTO model;
    DateTime? performancePeriodFrom;
    DateTime? performancePeriodTo;

    protected override async Task OnInitializedAsync()
    {
        this.pageInfoService.ShowBusyOverlay();
        var model = await Http.GetFromJsonAsync<InvoiceDTO>($"Invoices/{Id}") ?? throw new Exception("NotFound");
        performancePeriodFrom = model.PerformancePeriod?.From.ToDateTime(TimeOnly.MinValue);
        performancePeriodTo = model.PerformancePeriod?.To.ToDateTime(TimeOnly.MinValue);
        this.model = model;
        this.pageInfoService.HideBusyOverlay();
    }

    private async Task SubmitAsync()
    {
        if (performancePeriodFrom.HasValue || performancePeriodTo.HasValue)
        {
            this.model.PerformancePeriod = DatePeriod.CreateFrom(this.performancePeriodFrom, this.performancePeriodTo);
        }
        using var response = await Http.PutAsJsonAsync("Invoices/" + Id, this.model);
        NavigationManager.NavigateTo("/invoices");
    }
}