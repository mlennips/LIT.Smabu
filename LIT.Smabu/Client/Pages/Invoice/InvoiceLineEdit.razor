@page "/invoices/{InvoiceId:guid}/lines/{InvoiceLineId:guid}"
@using LIT.Smabu.Domain.Shared.Common;
@using LIT.Smabu.Shared.Customers;
@using LIT.Smabu.Shared.Invoices;
@using Microsoft.AspNetCore.Authorization;
@inject HttpClient Http
@inject PageInfoService pageInfoService;
@attribute [Authorize]


<MudContainer>
    @if (invoiceLine != null)
    {
        <MudStack Row Justify="Justify.SpaceBetween">
             <MudText Typo="Typo.h4">@($"Rechnung {@invoice.Number.ToShortString()} / Pos. {invoiceLine.Position}")</MudText>
                <MudButtonGroup>

                </MudButtonGroup>
            </MudStack>
        <MudForm Model="invoiceLine" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid>
                <MudItem xs="6" sm="3">
                    <MudNumericField Label="Menge" Required @bind-Value="quantityValue" TextChanged="RefreshTotalPrice" />
                </MudItem>
                <MudItem xs="6" sm="3">
                     <MudTextField Label="Einheit" Required @bind-Value="quantityUnit" />
                </MudItem>
                <MudItem xs="6" sm="3">
                     <MudNumericField Label="Einzelpreis" Required Format="#0.00" Adornment="Adornment.End" AdornmentText="@(invoice.Currency.Name)"
                        @bind-Value="invoiceLine.UnitPrice" TextChanged="RefreshTotalPrice" />
                </MudItem>
                <MudItem xs="6" sm="3">
                     <MudNumericField Label="Summe" Format="#0.00" ReadOnly Adornment="Adornment.End" AdornmentText="@(invoice.Currency.Name)"
                        HideSpinButtons @bind-Value="totalPrice" />
                </MudItem>
                <MudItem xs="12" sm="12" >
                    <MudTextField Label="Details" Lines="5" Clearable="true" Required @bind-Value="invoiceLine.Details" />
                </MudItem>
                 <MudItem xs="12">
                     <MudButtonGroup>
                         <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Default" Href="@($"Invoices/{InvoiceId}")" />
                         <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Success" Disabled="@(!success)" OnClick="@SubmitAsync" />
                     </MudButtonGroup>
                 </MudItem>
             </MudGrid>
         </MudForm>
    }
</MudContainer>



@code {
    @inject NavigationManager NavigationManager;
    [Parameter] public Guid InvoiceId { get; set; }
    [Parameter] public Guid InvoiceLineId { get; set; }
    bool success;
    string[] errors = { };
    InvoiceDTO invoice;
    InvoiceLineDTO invoiceLine;
    string quantityUnit;
    decimal quantityValue;
    decimal totalPrice;

    protected override async Task OnInitializedAsync()
    {
        pageInfoService.ShowBusyOverlay();
        invoice = await Http.GetFromJsonAsync<InvoiceDTO>($"Invoices/{InvoiceId}") ?? throw new Exception("NotFound");
        invoiceLine = invoice.InvoiceLines.First(x => x.Id.Value == InvoiceLineId);
        quantityUnit = invoiceLine.Quantity.Unit;
        quantityValue = invoiceLine.Quantity.Value;
        RefreshTotalPrice(0);
        pageInfoService.HideBusyOverlay();
    }

    private void RefreshTotalPrice(object value)
    {
        totalPrice = invoiceLine.UnitPrice * quantityValue;
        StateHasChanged();
    }

    private async Task SubmitAsync()
    {
        invoiceLine.Quantity = new Quantity(quantityValue, quantityUnit);
        using var response = await Http.PutAsJsonAsync($"Invoices/{InvoiceId}/lines/{InvoiceLineId}", invoiceLine);
        NavigationManager.NavigateTo($"/invoices/{InvoiceId}");
    }
}
